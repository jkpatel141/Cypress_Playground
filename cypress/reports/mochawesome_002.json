{
  "stats": {
    "suites": 1,
    "tests": 4,
    "passes": 4,
    "pending": 0,
    "failures": 0,
    "start": "2025-09-22T06:48:41.052Z",
    "end": "2025-09-22T06:49:25.699Z",
    "duration": 44647,
    "testsRegistered": 4,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "0de36047-e201-4a76-9704-437ec2d8c87c",
      "title": "",
      "fullFile": "cypress\\e2e\\practicles\\OppsConcept\\encapsulation_main.cy.js",
      "file": "cypress\\e2e\\practicles\\OppsConcept\\encapsulation_main.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "77a53183-4cd2-4c1f-be44-1a59c53051e2",
          "title": "Login Test",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "To verify the login attempt",
              "fullTitle": "Login Test To verify the login attempt",
              "timedOut": null,
              "duration": 22276,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.fixture('credentials').then(data => {\n  cy.contains(\"Auth\").click();\n  cy.contains(\"Login\").click();\n  const user = data.validCredentails.username;\n  const password = data.validCredentails.password;\n  login.assertEmailValidationMessage(\" Email is required! \").verifyUserNamePlaceHolder(\"Email address\").enterUsername(user).verifyPasswordPlaceHolder(\"Password\").assertPasswordValidationMessage(\" Password is required! \").enterPassword(password);\n  login.clickOnSignIn();\n  cy.url().should('include', 'https://playground.bondaracademy.com/pages/iot-dashboard');\n});",
              "err": {},
              "uuid": "cf4d6158-17b2-49bf-986a-767c82d802e8",
              "parentUUID": "77a53183-4cd2-4c1f-be44-1a59c53051e2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "To verify the login",
              "fullTitle": "Login Test To verify the login",
              "timedOut": null,
              "duration": 7343,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.contains(\"Forms\").click();\ncy.contains(\"Form Layouts\").click();\nconst name = \"Password\";\ncy.get('#inputEmail1').type('test@test.com', {\n  delay: 200\n});\ncy.get('#inputPassword2').type(`${name}`);",
              "err": {},
              "uuid": "da8638b2-9aa2-488b-9b1d-0542d4a4465f",
              "parentUUID": "77a53183-4cd2-4c1f-be44-1a59c53051e2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "To verify the dropdowns",
              "fullTitle": "Login Test To verify the dropdowns",
              "timedOut": null,
              "duration": 6318,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.contains('Modal & Overlays').click();\ncy.contains('Toastr').click();\ncy.contains('div', 'Toast type:').within(() => {\n  cy.get('select').should('be.visible').then($dropdown => {\n    cy.wrap($dropdown).find('option').each($option => {\n      const optionText = $option.text().trim();\n      cy.wrap($dropdown).select(optionText);\n      cy.wrap($dropdown).find(':selected').should('have.text', optionText);\n    });\n  });\n});",
              "err": {},
              "uuid": "7b2e3ec9-cf91-4881-a92f-ff9503b54b9b",
              "parentUUID": "77a53183-4cd2-4c1f-be44-1a59c53051e2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that all elements are selected and asserted",
              "fullTitle": "Login Test Verify that all elements are selected and asserted",
              "timedOut": null,
              "duration": 7556,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.contains('Modal & Overlays').click();\ncy.contains('Toastr').click();\n// cy.get('button.select-button').click({ multiple: true });\nconst expectedOptions = [\"top-left\", \"bottom-left\", \"bottom-right\", \"top-end\", \"top-start\", \"top-right\"];\nexpectedOptions.forEach(expectedOption => {\n  // Open the dropdown each time before selecting\n  cy.get('button.select-button').click({\n    multiple: true\n  });\n  // Find the option that matches and click it\n  cy.get('nb-option').contains(expectedOption).click();\n  // Verify the button now shows the selected option\n  cy.get('button.select-button').should('contain.text', expectedOption);\n});\n// cy.get('nb-option').each(($option, index) => {\n//     const actaulValue = $option.to.text().trim()\n//     expect(actaulValue).to.eq(expectedOptions[index])\n//     cy.wrap($option).click()\n//     cy.get('button.select-button').should('contain.text', actaulValue)\n//     if (index < expectedOptions.length - 1) {\n//         cy.get('button.select-button').click({});\n//     }\n// })",
              "err": {},
              "uuid": "d170a2de-d40c-4f73-82ff-898faa4697e3",
              "parentUUID": "77a53183-4cd2-4c1f-be44-1a59c53051e2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cf4d6158-17b2-49bf-986a-767c82d802e8",
            "da8638b2-9aa2-488b-9b1d-0542d4a4465f",
            "7b2e3ec9-cf91-4881-a92f-ff9503b54b9b",
            "d170a2de-d40c-4f73-82ff-898faa4697e3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 43493,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.4"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports",
        "overwrite": false,
        "html": true,
        "json": true
      },
      "version": "6.3.0"
    }
  }
}